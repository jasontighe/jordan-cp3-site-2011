package com.jordan.cp.managers {//	import fonts.InterstateBlack;//	import fonts.InterstateRegular;	import flash.errors.IllegalOperationError;	import flash.text.Font;	/**	 * @author JT	 */	public class FontManager 	{		private static var _instance				: FontManager;		private var _regular 						: Font;		private var _black					 		: Font;				public function FontManager()		{//			trace( "FOTNMANAGER : Constr" );			//Singleton			if( _instance )			{				throw new IllegalOperationError( this + " is a Singleton." );			}						_instance = this;		}				public static function getInstance() : FontManager		{			if( !_instance )			{				_instance = new FontManager();			}			return _instance;		}		public function init() : void		{//			trace( "FONTMANAGER : init()" );//			_regular = new InterstateRegular( ) as Font;//			_black = new InterstateBlack( ) as Font;			//			trace( "FONTMANAGER : init() : Font.enumerateFonts() is "+Font.enumerateFonts() );//			trace( "FONTMANAGER : init() : fontlist is "+fontlist );						testFonts();		}				//----------------------------------------------------------------------------		// protected methods		//----------------------------------------------------------------------------	 	protected function testFonts() : void	 	{////			SET TO TRUE TO GET A LIST OF ALL DEVICE AND EMBEDDED FONTS////	 		var fonts : Array = Font.enumerateFonts( true ); ////			SET TO TRUE TO GET A LIST OF ALL EMBEDDED FONTS//	 		var fonts : Array = Font.enumerateFonts( false );//			trace( "FONTMANAGER : testFonts() : fonts.length is "+fonts.length );//			//	 		for( var i : int = 0; i < fonts.length; i++ )//	 		{//				trace( "FONTMANAGER : testFonts() : fonts[i].fontName is "+fonts[i].fontName );////	 			var tf : TextField = new TextField;////	 			tf.text = fonts[i].fontName;////	 			tf.y = i * 10;////	 			addChild( tf );//	 		}	 	}				//----------------------------------------------------------------------------		// getter/setters		//----------------------------------------------------------------------------		public function get regular() : Font		{			return _regular;		}		public function get black() : Font		{			return _black;		}		public function get fontlist() : Array		{			var fonts : Array = Font.enumerateFonts( false ) as Array;			return fonts;		}	}}