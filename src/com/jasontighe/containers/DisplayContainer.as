package com.jasontighe.containers {	import com.greensock.TweenLite;	import com.greensock.easing.Sine;	import com.jasontighe.containers.events.ContainerEvent;	import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	public class DisplayContainer extends MovieClip implements IDisplayContainer	{				protected static const DEFAULT_EVENT_HANDLER : Function = new Function( );		protected var _initEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _showEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _hideEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _deconstructEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _isCascading : Boolean = true;		protected var _isInitialized : Boolean;		protected var _xPos : int = 0;		protected var _yPos : int = 0;		protected var _w : int = 0;		protected var _h : int = 0;		public function DisplayContainer ( ) : void		{					buttonMode = false;			mouseEnabled = false;			useHandCursor = false;						addEventListener( Event.ADDED_TO_STAGE, onAddedToStage );			addEventListener( Event.REMOVED_FROM_STAGE, onRemovedFromStage );		}		/**		 * 		 * interface		 * 		 */		public function init () : void		{						if ( _isInitialized ) deconstruct( );						addDisplayObjects( );			addEventHandlers( );			addEventListeners( );						_isInitialized = true;						dispatchEvent( new ContainerEvent( ContainerEvent.INIT ) );		}		public function show ( duration : Number = 0, delay : Number = 0 ) : void 		{			//			if ( visible ) return;			visible = true;						TweenLite.to( this, duration, { delay:delay, alpha:1, ease:Sine.easeIn, onComplete:onShowComplete } );		}		public function hide ( duration : Number = 0, delay : Number = 0 ) : void 		{			//			if ( !visible ) return;			TweenLite.to( this, duration, { delay:delay, alpha:0, ease:Sine.easeIn, onComplete:onHideComplete } );		}		public function deconstruct ( isCascading : Boolean = true ) : void 		{			_isCascading = isCascading;						remove( );						dispatchEvent( new ContainerEvent( ContainerEvent.DECONSTRUCT ) );						removeEventListener( ContainerEvent.DECONSTRUCT, _deconstructEventHandler );						_deconstructEventHandler = null;						_isInitialized = false;		}		public function removeChildren ( target : Sprite = null, isCascading : Boolean = true  ) : void		{			_isCascading = isCascading;						if ( !Boolean( target ) ) target = this; 			var i : int = target.numChildren;			var ob : DisplayObject;			while ( i-- ) 			{				ob = target.removeChildAt( i );				ob.filters = [ ];				if ( ob is Sprite ) Sprite( ob ).graphics.clear( );				if ( ob is Bitmap ) Bitmap( ob ).bitmapData.dispose( );				if ( ob is DisplayContainer && _isCascading ) DisplayContainer( ob ).deconstruct( );			}		}		public function killTweensOf ( target : Object = null ) : void		{			if ( !Boolean( target ) ) target = this; 			TweenLite.killTweensOf( target );			for ( var i:String in target ) TweenLite.killTweensOf( target[ i ] );		}			/**		 * 		 * protected methods		 * 		 */		protected function addDisplayObjects () : void		{						}		protected function removeDisplayObjects () : void		{				removeChildren( );			graphics.clear( );		}		protected function addEventListeners () : void		{					}		protected function remove () : void		{			killTweensOf( );			removeEventListeners( );				removeEventHandlers( );					removeDisplayObjects( );		}		protected function removeEventListeners () : void		{			if ( hasEventListener( Event.ADDED_TO_STAGE ) )				removeEventListener( Event.ADDED_TO_STAGE, onAddedToStage );			if ( hasEventListener( Event.REMOVED_FROM_STAGE ) )				removeEventListener( Event.REMOVED_FROM_STAGE, onRemovedFromStage );			removeEventListener( ContainerEvent.INIT, _initEventHandler );			removeEventListener( ContainerEvent.SHOW, _showEventHandler );			removeEventListener( ContainerEvent.HIDE, _hideEventHandler );		}		protected function addEventHandlers () : void		{									_initEventHandler = checkEventHandler( _initEventHandler );				_showEventHandler = checkEventHandler( _showEventHandler );				_hideEventHandler = checkEventHandler( _hideEventHandler );				_deconstructEventHandler = checkEventHandler( _deconstructEventHandler );			}		protected function removeEventHandlers () : void		{						_initEventHandler = null;			_showEventHandler = null;			_hideEventHandler = null;		}		final protected function checkEventHandler ( value : Function ) : Function		{			if ( !Boolean( value ) ) value = DEFAULT_EVENT_HANDLER;			return value;		}		/**		 * 		 * getters/setters		 * 		 */		public function setInitEventHandler ( value : Function = null ) : void		{			removeEventListener( ContainerEvent.INIT, _initEventHandler );						_initEventHandler = checkEventHandler( value );						addEventListener( ContainerEvent.INIT, _initEventHandler ); 			}		public function setShowEventHandler ( value : Function = null ) : void		{			removeEventListener( ContainerEvent.SHOW, _showEventHandler );						_showEventHandler = checkEventHandler( value );						addEventListener( ContainerEvent.SHOW, _showEventHandler ); 				}		public function setHideEventHandler ( value : Function = null ) : void		{			removeEventListener( ContainerEvent.HIDE, _hideEventHandler );						_hideEventHandler = checkEventHandler( value );						addEventListener( ContainerEvent.HIDE, _hideEventHandler ); 			}		public function setDeconstructEventHandler ( value : Function = null ) : void		{			removeEventListener( ContainerEvent.DECONSTRUCT, _deconstructEventHandler );						_deconstructEventHandler = checkEventHandler( value );						addEventListener( ContainerEvent.DECONSTRUCT, _deconstructEventHandler );		}		public function getWidth ( ) : uint		{			return _w;		}		public function setWidth ( value : uint ) : void		{			_w = value;		}		public function getHeight ( ) : uint		{			return _h;		}		public function setHeight ( value : uint ) : void		{			_h = value;		}		public function getX ( ) : int		{			return _xPos;		}		public function setX ( value : int ) : void		{			_xPos = value;		}		public function getY ( ) : int		{			return _yPos;		}		public function setY ( value : int ) : void		{			_yPos = value;		}				/**		 * 		 * event handlers		 * 		 */		protected function onAddedToStage ( e : Event ) : void		{				}		protected function onRemovedFromStage ( e : Event ) : void		{			}		protected function onShowComplete ( e : Event = null ) : void		{			dispatchEvent( new ContainerEvent( ContainerEvent.SHOW ) );		}		protected function onHideComplete ( e : Event = null ) : void		{			visible = false;						dispatchEvent( new ContainerEvent( ContainerEvent.HIDE ) );		}	}}