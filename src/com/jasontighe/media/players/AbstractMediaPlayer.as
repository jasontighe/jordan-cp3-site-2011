package com.jasontighe.media.players {	import com.jasontighe.containers.DisplayContainer;	import com.jasontighe.containers.events.ContainerEvent;	import com.jasontighe.media.events.MediaEvent;	import com.jasontighe.media.objects.IMediaObject;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;		public class AbstractMediaPlayer extends DisplayContainer implements IMediaPlayer 	{						protected var _media:IMediaObject;			protected var _timerStatus:Timer;			protected var _timerPlayer:Timer;		protected var _isPlaying:Boolean;		protected var _timeCheck:Number = NaN;		protected var _mediaPlayerReadyEventHandler:Function = new Function( );		protected var _mediaPlayerStartEventHandler:Function = new Function( );		protected var _mediaPlayerProgressEventHandler:Function = new Function( );		protected var _mediaPlayerFinishedEventHandler:Function = new Function( );		protected var _mediaPlayerResumeEventHandler:Function = new Function( );		protected var _mediaPlayerPauseEventHandler:Function = new Function( );		protected var _mediaPlayerSeekEventHandler:Function = new Function( );		protected var _mediaPlayerResetEventHandler:Function = new Function( );		public function AbstractMediaPlayer( media:IMediaObject, isPlaying:Boolean = false )		{									_media = media;						_isPlaying = isPlaying;									addChild( _media as Sprite );			}		/*		 * 		 * interface		 * 		 */		override public function init():void		{							addTimerPlayer( );				addTimerStatus( );				checkPlayback( );						dispatchEvent( new ContainerEvent( ContainerEvent.INIT ) );		}		/*		 * 		 * private methods		 * 		 */		protected function addTimerPlayer():void		{			//trace("addTimerPlayer")			_timerPlayer = new Timer( 32 );			_timerPlayer.addEventListener( TimerEvent.TIMER, onUpdatePlayerProgress );		}		protected function addTimerStatus():void		{			_timerStatus = new Timer( 32 );			_timerStatus.addEventListener( TimerEvent.TIMER, onUpdateReadyStatus );			_timerStatus.addEventListener( TimerEvent.TIMER, onUpdateLoaderStatus );			_timerStatus.start( );			}		protected function removeTimerPlayer():void		{			//trace("remove timer player: "+_timerPlayer);			if ( _timerPlayer )			{				_timerPlayer.stop( );				_timerPlayer.removeEventListener( TimerEvent.TIMER, onUpdatePlayerProgress );				_timerPlayer = null;			}		}		protected function removeTimerStatus():void		{			if ( _timerStatus )			{				_timerStatus.stop( );				_timerStatus.removeEventListener( TimerEvent.TIMER, onUpdateReadyStatus );				_timerStatus.removeEventListener( TimerEvent.TIMER, onUpdateLoaderStatus );					_timerStatus.removeEventListener( TimerEvent.TIMER, onUpdateResetStatus );				_timerStatus = null;			}		}		override protected function addEventListeners():void		{				super.addEventListeners( );		}		override protected function removeEventListeners():void		{						super.removeEventListeners( );						removeEventListener( MediaEvent.MEDIA_PLAYER_READY, _mediaPlayerReadyEventHandler );			removeEventListener( MediaEvent.MEDIA_PLAYER_START, _mediaPlayerStartEventHandler );			removeEventListener( MediaEvent.MEDIA_PLAYER_PROGRESS, _mediaPlayerProgressEventHandler );			removeEventListener( MediaEvent.MEDIA_PLAYER_FINISHED, _mediaPlayerFinishedEventHandler );			removeEventListener( MediaEvent.MEDIA_PLAYER_RESUME, _mediaPlayerResumeEventHandler );			removeEventListener( MediaEvent.MEDIA_PLAYER_PAUSE, _mediaPlayerPauseEventHandler );			removeEventListener( MediaEvent.MEDIA_PLAYER_SEEK, _mediaPlayerSeekEventHandler );			removeEventListener( MediaEvent.MEDIA_PLAYER_RESET, _mediaPlayerResetEventHandler );		}		override protected function removeEventHandlers():void		{						super.removeEventHandlers( );						_mediaPlayerReadyEventHandler = null;			_mediaPlayerStartEventHandler = null;			_mediaPlayerProgressEventHandler = null;			_mediaPlayerFinishedEventHandler = null;			_mediaPlayerResumeEventHandler = null;			_mediaPlayerPauseEventHandler = null;			_mediaPlayerSeekEventHandler = null;			_mediaPlayerResetEventHandler = null;		}		protected function updateTime():void		{			_timeCheck = _media.time;			}		/*		 * 		 * display list events		 * 		 */		override protected function onAddedToStage( e:Event ):void		{			super.onAddedToStage( e );		}		override protected function onRemovedFromStage( e:Event ):void		{				//trace("abstrace media player onRemovedFromStage")			super.onRemovedFromStage( e );						removeTimerPlayer( );			removeTimerStatus( );			_media = null;		}		/*		 * 		 * utils		 * 		 */			final protected function checkPlayback():void		{			if ( _isPlaying ) 			{ 				resume( ); 			}		}		final protected function checkStart():Boolean		{			if ( _timeCheck == 0 && time != _timeCheck )			{				dispatchEvent( new MediaEvent( MediaEvent.MEDIA_PLAYER_START ) );				return true;			}			else			{				return false;							}		}		final protected function checkFinished():Boolean		{//			trace( 'time > ' + time )//			trace( 'duration > ' + duration )//			trace( '-------' )			if ( time >= duration && time != _timeCheck )			{				dispatchEvent( new MediaEvent( MediaEvent.MEDIA_PLAYER_FINISHED ) );				return true;			}			else			{				return false;							}		}		/**		 * 		 * event handlers		 * 		 */		protected function onUpdateReadyStatus( e:TimerEvent ):void		{				if ( isReady )			{				_timerStatus.removeEventListener( TimerEvent.TIMER, onUpdateReadyStatus );								dispatchEvent( new MediaEvent( MediaEvent.MEDIA_PLAYER_READY ) );			}		}		protected function onUpdateResetStatus( e:TimerEvent ):void		{			if ( isReset )			{				_timerStatus.removeEventListener( TimerEvent.TIMER, onUpdateResetStatus );								dispatchEvent( new MediaEvent( MediaEvent.MEDIA_PLAYER_RESET ) );				}					}		protected function onUpdateLoaderStatus( e:TimerEvent ):void		{			}		protected function onUpdatePlayerProgress( e:TimerEvent ):void		{							//trace("onUpdatePlayerProgress");			checkStart( );									dispatchEvent( new MediaEvent( MediaEvent.MEDIA_PLAYER_PROGRESS ) );						if(!checkFinished( ))							updateTime( );		}		/**		 * 		 * interface		 * 		 */		public function toggle():Boolean		{			if ( _isPlaying )			{								pause( );			}			else			{								resume( );			}				return _isPlaying;		}		public function resume():void		{							_isPlaying = true;								_timerPlayer.start( );							_media.resume( );										dispatchEvent( new MediaEvent( MediaEvent.MEDIA_PLAYER_RESUME ) );			}		public function pause():void		{			_timerPlayer.stop( );						_isPlaying = false;							_media.pause( );										dispatchEvent( new MediaEvent( MediaEvent.MEDIA_PLAYER_PAUSE ) );		}		public function reset():void		{						_media.reset( );					_media.resume( );			_timerStatus.addEventListener( TimerEvent.TIMER, onUpdateResetStatus );		}		public function seek( time:Number ):void		{			_media.seek( time );						dispatchEvent( new MediaEvent( MediaEvent.MEDIA_PLAYER_SEEK ) );		}		/*		 * 		 * getters/setters		 * 		 */		public function get media():*		{			return _media;		}		public function get isReady():Boolean		{			return true;		}		public function get isReset():Boolean		{			var isReset:Boolean = false;			if ( time == 0 ) 			{ 				isReset = true;			}						return isReset;		}		public function get isPlaying():Boolean		{			return _isPlaying;		}		public function get url():String		{			return _media.url;		}		public function get time():Number		{			return _media.time;		}		public function get duration():Number		{			return _media.duration;		}		public function get remaining():Number		{			return _media.remaining;		}			public function get percent():Number		{			return _media.percent;		}			public function get vol():Number		{			return _media.vol;		}					public function set vol( value:Number ):void		{			_media.vol = value;		}		public function get bufferTime():Number		{			return _media.bufferTime;		}					public function set bufferTime( bufferTime:Number ):void		{			_media.bufferTime = bufferTime;		}		public function get videoWidth():Number		{			return _media.videoWidth;		}		public function get videoHeight():Number		{			return _media.videoHeight;		}		public function setMediaPlayerReadyEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_PLAYER_READY, _mediaPlayerReadyEventHandler );						_mediaPlayerReadyEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_PLAYER_READY, _mediaPlayerReadyEventHandler ); 			}		public function setMediaPlayerStartEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_PLAYER_START, _mediaPlayerStartEventHandler );						_mediaPlayerStartEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_PLAYER_START, _mediaPlayerStartEventHandler ); 			}		public function setMediaPlayerProgressEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_PLAYER_PROGRESS, _mediaPlayerProgressEventHandler );						_mediaPlayerProgressEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_PLAYER_PROGRESS, _mediaPlayerProgressEventHandler ); 			}		public function setMediaPlayerFinishedEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_PLAYER_FINISHED, _mediaPlayerFinishedEventHandler );						_mediaPlayerFinishedEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_PLAYER_FINISHED, _mediaPlayerFinishedEventHandler ); 			}		public function setMediaPlayerResumeEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_PLAYER_RESUME, _mediaPlayerResumeEventHandler );						_mediaPlayerResumeEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_PLAYER_RESUME, _mediaPlayerResumeEventHandler ); 			}		public function setMediaPlayerPauseEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_PLAYER_PAUSE, _mediaPlayerPauseEventHandler );						_mediaPlayerPauseEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_PLAYER_PAUSE, _mediaPlayerPauseEventHandler ); 			}		public function setMediaPlayerSeekEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_PLAYER_SEEK, _mediaPlayerSeekEventHandler );						_mediaPlayerSeekEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_PLAYER_SEEK, _mediaPlayerSeekEventHandler ); 			}		public function setMediaPlayerResetEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_PLAYER_RESET, _mediaPlayerResetEventHandler );						_mediaPlayerResetEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_PLAYER_RESET, _mediaPlayerResetEventHandler ); 			}	}}