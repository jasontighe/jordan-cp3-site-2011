package com.jasontighe.media.objects {	import com.akamai.AkamaiConnection;	import com.akamai.events.AkamaiErrorEvent;	import com.akamai.events.AkamaiNotificationEvent;	import com.akamai.events.AkamaiStatusEvent;	import com.jasontighe.containers.events.ContainerEvent;	import com.jasontighe.media.objects.AbstractMediaObjectStreaming;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.media.Video;	import flash.net.NetStream;	import flash.utils.Timer;		public class StreamingObject extends AbstractMediaObjectStreaming 	{		protected var _isReady : Boolean;		protected var _timer : Timer;		protected var _video : Video;		protected var _meta : Object;		protected var _connection : AkamaiConnection;		protected var _urlLow : String;		public function StreamingObject ( urlHigh : String, server : String, urlLow : String = null )		{			super( urlHigh, server );						_urlLow = urlLow;		}		/**		 * 		 * interface		 * 		 */		override public function init () : void		{								//trace("StreamingObject > init")							addConnection( );		}			public function unload () : void		{			removeConnection( );			removeVideo( );								_meta = null;		}			override public function resume () : void		{					_connection.resume( );		}		override public function pause () : void		{			super.pause( );						_connection.pause( );						}		override public function reset () : void		{				super.reset( );								_connection.seek( 0 );		}		override public function seek ( time : Number ) : void		{						var offset : int = time;						if ( offset < 0 ) offset = 0;			if ( offset > time ) offset = int( time );						_connection.seek( offset );					}			protected function addConnection () : void		{			//trace( 'StreamingObject > addConnection to ' + _server );			_connection = new AkamaiConnection( );						_connection.createStream = true;			_connection.useFastStartBuffer = true;			_connection.maxBufferLength = 6;			_connection.isLive = false;			_connection.addEventListener( AkamaiErrorEvent.ERROR, onConnectionError );			_connection.addEventListener( AkamaiNotificationEvent.BANDWIDTH, onBandwidthNotification );			_connection.addEventListener( AkamaiNotificationEvent.CONNECTED, onConnectedNotification );			_connection.addEventListener( AkamaiNotificationEvent.SUBSCRIBED, onSubscribedNotification );			_connection.addEventListener( AkamaiNotificationEvent.STREAM_LENGTH, onStreamLength );			_connection.addEventListener( AkamaiStatusEvent.NETSTREAM_METADATA, onMetaData );			_connection.addEventListener( AkamaiStatusEvent.NETSTREAM_PLAYSTATUS, onPlayStatus );			_connection.addEventListener( AkamaiStatusEvent.NETSTREAM, onNetStream );			_connection.connect( _server );		}		protected function addNetStream () : void		{									//trace( 'StreamingObject > addNetStream ' + _url );			_video = new Video( );			_video.deblocking = 3;			_video.smoothing = false;			_video.visible = false;						addChild( _video );						_video.attachNetStream( _connection.netStream );						_connection.requestStreamLength( _url );			_connection.play( _url );			_connection.pause( );			_connection.seek( 0 );		}		protected function addTimer () : void		{			_timer = new Timer( 3000, 1 );			_timer.addEventListener( TimerEvent.TIMER_COMPLETE, onTimeOut );			_timer.start( );		}		override protected function onRemovedFromStage ( e : Event ) : void		{			super.onRemovedFromStage( e );						unload( );		}		protected function removeConnection () : void		{						//trace( 'StreamingObject > removeConnection ' );			if ( _connection )			{				_connection.removeEventListener( AkamaiErrorEvent.ERROR, onConnectionError );				_connection.removeEventListener( AkamaiNotificationEvent.BANDWIDTH, onBandwidthNotification );				_connection.removeEventListener( AkamaiNotificationEvent.CONNECTED, onConnectedNotification );				_connection.removeEventListener( AkamaiNotificationEvent.SUBSCRIBED, onSubscribedNotification );				_connection.removeEventListener( AkamaiNotificationEvent.STREAM_LENGTH, onStreamLength );				_connection.removeEventListener( AkamaiStatusEvent.NETSTREAM_METADATA, onMetaData );				_connection.removeEventListener( AkamaiStatusEvent.NETSTREAM_PLAYSTATUS, onPlayStatus );				if ( _connection.netStream != null ) 					_connection.netStream.close( );				_connection.close( );				_connection = null;			}		}		protected function removeVideo () : void		{			if ( _video )			{				_video.attachNetStream( null );				_video.clear( );				_video = null;			}		}		protected function removeTimer () : void		{			if ( _timer )			{				_timer.stop( );				_timer.removeEventListener( TimerEvent.TIMER_COMPLETE, onTimeOut );				_timer = null;			}		}		override protected function addProperties () : void		{					super.addProperties( );									//trace( 'StreamingObject > addProperties ' );			_video.width = _video.videoWidth;			_video.height = _video.videoHeight;			if ( !Boolean( _video.width ) ) _video.width = _meta.width;			if ( !Boolean( _video.height ) ) _video.height = _meta.height;			_video.visible = true;		}		protected function ready () : void		{			//trace( 'StreamingObject > ready ' );			_isReady = true;						removeTimer( );			addProperties( );						dispatchEvent( new ContainerEvent( ContainerEvent.INIT ) );		}		/**		 * 		 * getters/setters		 * 		 */		override public function get videoWidth () : Number		{			return _video.videoWidth;		}		override public function get videoHeight () : Number		{			return _video.videoHeight;		}		public function get ns () : NetStream		{						return _connection.netStream;					}		public function get meta () : Object		{						return _meta;					}		override public function get time () : Number		{						return _connection.time;			}			override public function get vol () : Number		{				return _connection.volume;		}			override public function set vol ( volume : Number ) : void		{													if ( _connection ) _connection.volume = volume; 		}		override public function get bufferTime () : Number		{				return _bufferTime;		}			override public function set bufferTime ( bufferTime : Number ) : void		{				if ( _connection ) _connection.maxBufferLength = bufferTime; 						_bufferTime = bufferTime;		}		/*		 * 		 * event handlers		 * 		 */		protected function onConnectionError ( e : AkamaiErrorEvent ) : void		{			trace( 'StreamingObject > onConnectionError > ' + e.errorDescription );		}		protected function onBandwidthNotification ( e : AkamaiNotificationEvent ) : void		{			trace( 'StreamingObject > onBandwidthNotification: ' + _connection.bandwidth );						if ( _connection.bandwidth < _bandwidthThreshold && _urlLow != null ) _url = _urlLow;						addNetStream( );		}		protected function onConnectedNotification ( e : AkamaiNotificationEvent ) : void		{			//trace( 'StreamingObject > onConnectedNotification ' );			_connection.detectBandwidth( );		}		protected function onSubscribedNotification ( e : AkamaiNotificationEvent ) : void		{			//trace( 'StreamingObject > onSubscribedNotification' );		}		protected function onNetStream ( e : AkamaiStatusEvent ) : void		{			//trace( 'StreamingObject > onNetStream > ' + e.type );		}		protected function onMetaData ( e : AkamaiStatusEvent ) : void		{								//trace( 'StreamingObject > onMetaData > ' + e.info );			if ( !Boolean( _meta ) )			{										_meta = e.info;							for ( var i:String in _meta ) trace( i + ' : ' + _meta[ i ] );				trace( '------------' );								if ( !_isReady ) ready( );				}		}		protected function onPlayStatus ( status : * ) : void		{						//trace('StreamingObject > onPlayStatus')			//for ( var i:String in status )			//{			//	trace( i + ' : ' + status[ i ] );			//}					}		protected function onStreamLength ( e : AkamaiNotificationEvent ) : void		{						//trace( 'StreamingObject > onStreamLength > ' + _connection.streamLength );			_duration = _connection.streamLength;							addTimer( );		}		protected function onTimeOut ( e : TimerEvent ) : void		{			//trace( 'onTimeOut' );			ready( );		}	}}