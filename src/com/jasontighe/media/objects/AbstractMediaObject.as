package com.jasontighe.media.objects {	import com.jasontighe.containers.DisplayContainer;	import com.jasontighe.media.events.MediaEvent;	import com.jasontighe.media.objects.IMediaObject;		import flash.events.Event;		public class AbstractMediaObject extends DisplayContainer implements IMediaObject	{				
		private static const MUST_OVERRIDE_METHOD:String = new String( 'must override method' );		protected var _url:String;							protected var _duration:Number = 0;				protected var _bufferTime:Number = .1;		protected var _time:Number = 0;			protected var _volume:Number = 1;		protected var _mediaObjectLoadStartEventHandler:Function = new Function( );		protected var _mediaObjectLoadProgressEventHandler:Function = new Function( );		protected var _mediaObjectLoadCompleteEventHandler:Function = new Function( );
		public function AbstractMediaObject( url:String )		{									_url = url;			}
		protected function addProperties():void		{					}
		override protected function addEventListeners():void		{			super.addEventListeners( );		}
		override protected function removeEventListeners():void		{						super.removeEventListeners( );						removeEventListener( MediaEvent.MEDIA_OBJECT_LOAD_START, _mediaObjectLoadStartEventHandler );			removeEventListener( MediaEvent.MEDIA_OBJECT_LOAD_PROGRESS, _mediaObjectLoadProgressEventHandler );			removeEventListener( MediaEvent.MEDIA_OBJECT_LOAD_COMPLETE, _mediaObjectLoadCompleteEventHandler );		}
		override protected function removeEventHandlers():void		{						super.removeEventHandlers( );						_mediaObjectLoadStartEventHandler = null;			_mediaObjectLoadProgressEventHandler = null;			_mediaObjectLoadCompleteEventHandler = null;					}
		/*		 * 		 * display list events		 * 		 */		override protected function onAddedToStage( e:Event ):void		{			super.onAddedToStage( e );		}
		override protected function onRemovedFromStage( e:Event ):void		{				super.onRemovedFromStage( e );			}
		/*		 * 		 * interface		 * 		 */		public function toggle():Boolean		{				return false;		}
		public function resume():void		{			}
		public function pause():void		{				}
		public function reset():void		{		}
		public function seek( time:Number ):void		{				}
		/*		 * 		 * getters/setters		 * 		 */		public function get url():String		{			return _url;		}
		public function get duration():Number		{			return _duration;		}				public function get percent():Number		{						var p:Number = time / duration;			if ( p < 0 ) 			{ 				p = 0; 			}			if ( p > 1 ) 			{ 				p = 1; 			}			return p;		}			public function get remaining():Number		{						var r:Number = duration - time;			if ( r < 0 ) 			{ 				r = 0; 			}			return  r;		}	
		public function get time():Number		{			throw( new Error( AbstractMediaObject.MUST_OVERRIDE_METHOD ) );						return NaN;		}
		public function get vol():Number		{					return _volume;			}
		public function set vol( volume:Number ):void		{				_volume = volume;				}
		public function get bufferTime():Number		{					return _bufferTime;		}
		public function set bufferTime( bufferTime:Number ):void		{				}				public function get videoWidth():Number		{			throw( new Error( AbstractMediaObject.MUST_OVERRIDE_METHOD ) );			return 0;		}				public function get videoHeight():Number		{			throw( new Error( AbstractMediaObject.MUST_OVERRIDE_METHOD ) );			return 0;		}				public function setMediaObjectLoadStartEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_OBJECT_LOAD_START, _mediaObjectLoadStartEventHandler );						_mediaObjectLoadStartEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_OBJECT_LOAD_START, _mediaObjectLoadStartEventHandler ); 			}				public function setMediaObjectLoadProgressEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_OBJECT_LOAD_PROGRESS, _mediaObjectLoadProgressEventHandler );						_mediaObjectLoadProgressEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_OBJECT_LOAD_PROGRESS, _mediaObjectLoadProgressEventHandler ); 			}				public function setMediaObjectLoadCompleteEventHandler( value:Function = null ):void		{			removeEventListener( MediaEvent.MEDIA_OBJECT_LOAD_COMPLETE, _mediaObjectLoadCompleteEventHandler );						_mediaObjectLoadCompleteEventHandler = checkEventHandler( value );						addEventListener( MediaEvent.MEDIA_OBJECT_LOAD_COMPLETE, _mediaObjectLoadCompleteEventHandler ); 			}	}}