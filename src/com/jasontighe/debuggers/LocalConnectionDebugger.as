package com.jasontighe.debuggers{	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageQuality;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.external.ExternalInterface;	import flash.net.LocalConnection;	import flash.system.Capabilities;	import flash.text.AntiAliasType;	import flash.text.GridFitType;	import flash.text.TextField;	import flash.text.TextFormat;		public class LocalConnectionDebugger extends Sprite 	{		private var _flashvars:Object;		private var _connectionName:String = 'connectionName';		private var _localConnection:LocalConnection;		private var _textField:TextField = new TextField( );		public function LocalConnectionDebugger()		{				initStage( );			initFlashVars( );						addEventListener( Event.ADDED_TO_STAGE, onAddedToStage );		}		private function initStage():void		{			stage.align = StageAlign.TOP_LEFT;			stage.quality = StageQuality.BEST;			stage.scaleMode = StageScaleMode.NO_SCALE;			}		private function initFlashVars():void		{			_flashvars = LoaderInfo( root.loaderInfo ).parameters;		}		private function initSite():void		{				addLocalConnection( );			addTextField( );		}		private function addLocalConnection():void		{			var connectionName:String = _flashvars.connectionName;			if ( Boolean( connectionName ) ) _connectionName = connectionName;							_localConnection = new LocalConnection( );			_localConnection.allowDomain( '*' );			_localConnection.client = this;			try 			{				_localConnection.connect( _connectionName );			} 			catch ( e:ArgumentError ) 			{				displayConnectionError( ); 			}		}		private function addTextField():void		{			addChild( _textField );						_textField.textColor = 0x666666;			_textField.selectable = true;			_textField.embedFonts = false;			_textField.antiAliasType = AntiAliasType.ADVANCED;			_textField.gridFitType = GridFitType.PIXEL;			_textField.background = true;			_textField.backgroundColor = 0xFFFFFF;			_textField.width = stage.stageWidth;			_textField.height = stage.stageHeight;		}		private function displayConnectionError():void		{			var message:String = 'Can\'t connect to \'' + _connectionName + '\', the connection name is already being used by another SWF';					if ( ExternalInterface.available && Capabilities.playerType == 'PlugIn' )			{				ExternalInterface.call( 'alert', message );			}			else			{				trace( message );			}		}		/*		 * 		 * interface		 * 		 */		public function publish( text:String ):void		{			_textField.appendText( text + '\n' );						var fmt:TextFormat = new TextFormat( );			fmt.size = 14;			fmt.leading = 5;			fmt.letterSpacing = .5;						_textField.setTextFormat( fmt );		} 		/*		 * 		 * events		 * 		 */		private function onAddedToStage( e:Event ):void		{			removeEventListener( Event.ADDED_TO_STAGE, onAddedToStage );			initSite( );		}	}}