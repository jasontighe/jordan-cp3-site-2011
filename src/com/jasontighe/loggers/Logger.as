package com.jasontighe.loggers {	import flash.errors.IllegalOperationError;	import flash.utils.getQualifiedClassName;	import flash.utils.getTimer;		import com.jasontighe.loggers.Levels;	import com.jasontighe.loggers.TargetCreator;	import com.jasontighe.loggers.targets.ILoggerTarget;		/**	 * <p>Used for logging throughout the website</p>	 * 	 * @example	 * 	 * <listing version="3.0">	 * Logger.target = new TraceTarget( );	 * Logger.info( "This is an info level message" );	 * Logger.warn( "This is a warning" );	 * Logger.error( "This is an error" );	 * </listing>	 * 	 * <p>The target can be defined depending on what you want to use. See the <code>com.jasontighe.logger.targets</code> package for existing targets.	 * You can also create your own target as long as it implements <code>ILoggerTarget</code>.</p>	 * 	 * <p>When publishing a site online set the mode to <code>Logger.PRODUCTION_MODE</code>, which will disable all logs</p>	 * 	 * @see com.akqa.loggers.targets.TraceTarget	 * @see com.akqa.loggers.targets.FirebugTarget	 * @see com.akqa.loggers.targets.SafariTarget  	 * @see com.akqa.loggers.targets.ILoggerTarget	 * @see mode	 * 	 * @author Ronnie Liew, Antti Kupila	 */	public class Logger 	{		//---------------------------------------------------------------------		//		//  Constants		//		//---------------------------------------------------------------------		public static const PRODUCTION_MODE:int = 0;		public static const DEBUG_MODE:int = 1;		//---------------------------------------------------------------------		//		//  Variables		//		//---------------------------------------------------------------------								/**		 * <p>The mode to use, either <code>Logger.DEBUG_MODE</code> or <code>Logger.PRODUCTION_MODE</code></p>		 * <p>Setting the mode to <code>Logger.PRODUCTION_MODE</code> will disablee logging</p>		 */		public static var lastTime:Number = getTimer( );		public static var lastDate:Date = new Date( );		public static var mode:int = DEBUG_MODE;		public static var level:uint = 0;		public static var filter:String;		public static var connectionName:String = "connectionName";		public static var isMeasuringIntervalTime:Boolean;		public static var isMeasuringElapseTime:Boolean;		public static var isRecordingTimeStamp:Boolean;		/**		 * <p>The target creator getter</p>		 * 		 * @default TraceTarget		 * 		 * @see com.akqa.loggers.targets.TraceTarget		 * @see com.akqa.loggers.targets.ConsoleTarget		 * @see com.akqa.loggers.targets.AlertTarget		 * @see com.akqa.loggers.targets.ILoggerTarget		 */		private static var targetCreator:TargetCreator = new TargetCreator( );		//---------------------------------------------------------------------		//		//  Constructor		//		//---------------------------------------------------------------------				public function Logger() 		{			throw new IllegalOperationError( getQualifiedClassName( this ) + "should not be instantiated" ); 		}		//---------------------------------------------------------------------		//		//  Public methods		//		//---------------------------------------------------------------------		/**		 * <p>sets the target</p>		 */		public static function set target( value:* ):void 		{			if ( mode == PRODUCTION_MODE ) return;			targetCreator.targetID = value;		}		/**		 * <p>Logs a debug level message. This should be used for development related logging to follow the execution of the code</p>		 */		public static function debug( obj:* ):void 		{			if ( mode == PRODUCTION_MODE ) return;			targetCreator.target.publish( Levels.DEBUG, obj );		}		/**		 * <p>Logs a debug level message. This should be used to notify of normal event flow in the site</p>		 */		public static function info( obj:* ):void 		{			if ( mode == PRODUCTION_MODE ) return;			targetCreator.target.publish( Levels.INFO, obj );		}		/**		 * <p>Logs a debug level message. This is used when something goes wrong and a warning should be given but normal execution can continue</p>		 */		public static function warn(obj:*):void 		{			if ( mode == PRODUCTION_MODE ) return;			targetCreator.target.publish( Levels.WARN, obj );		}		/**		 * <p>Logs a debug level message. This is used for errors that break something but allow further execution</p>		 */		public static function error( obj:* ):void 		{			if ( mode == PRODUCTION_MODE ) return;			targetCreator.target.publish( Levels.ERROR, obj );		}		/**		 * <p>Logs a debug level message. This is used when something critical happens and further execution is not possible</p>		 */		public static function critical( obj:* ):void 		{			if ( mode == PRODUCTION_MODE ) return;			targetCreator.target.publish( Levels.CRITICAL, obj );		}	}}