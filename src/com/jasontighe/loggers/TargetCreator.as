package com.jasontighe.loggers {	import com.jasontighe.loggers.targets.AlertTarget;	import com.jasontighe.loggers.targets.ConsoleTarget;	import com.jasontighe.loggers.targets.ILoggerTarget;	import com.jasontighe.loggers.targets.LocalConnectionTarget;	import com.jasontighe.loggers.targets.TraceTarget;		public class TargetCreator 	{		public static const CONSOLE:String = 'console';		public static const ALERT:String = 'alert';		public static const LOCAL_CONNECTION:String = 'local connection';		public static const LOCALCONNECTION:String = 'localconnection';		public static const TRACE:String = 'trace';		private static var _consoleTarget:ILoggerTarget;		private static var _alertTarget:ILoggerTarget;		private static var _localConnectionTarget:ILoggerTarget;		private static var _traceTarget:ILoggerTarget;		private var _id:String;		//--------------------------------------------------------------------------		//		//  Constructor		//		//--------------------------------------------------------------------------		public function TargetCreator() 		{					}		internal function get target():ILoggerTarget		{			var loggerTarget:ILoggerTarget;						switch ( _id )			{				case CONSOLE:					loggerTarget = getConsoleTarget();					break;				case ALERT:					loggerTarget = getAlertTarget();					break;				case LOCAL_CONNECTION:					loggerTarget = getLocalConnectionTarget();					break;				case LOCALCONNECTION:					loggerTarget = getLocalConnectionTarget();					break;				case TRACE:					loggerTarget = getTraceTarget();					break;				default:					loggerTarget = getTraceTarget();			}			return loggerTarget;		}				private function getConsoleTarget():ILoggerTarget		{			if ( !_consoleTarget ) _consoleTarget = new ConsoleTarget();			return _consoleTarget;		}				private function getAlertTarget():ILoggerTarget		{			if ( !_alertTarget ) _alertTarget = new AlertTarget();			return _alertTarget;		}				private function getLocalConnectionTarget():ILoggerTarget		{			if ( !_localConnectionTarget ) _localConnectionTarget = new LocalConnectionTarget();			return _localConnectionTarget;		}				private function getTraceTarget():ILoggerTarget		{			if ( !_traceTarget ) _traceTarget = new TraceTarget();			return _traceTarget;		}		internal function set targetID( value:String ):void		{			_id = value;		}				internal function get targetID( ):String		{			return _id;		}			}}