package com.jasontighe.loaders {	import com.jasontighe.loaders.events.QueueLoadItemEvent;	import flash.errors.IllegalOperationError;	import flash.events.EventDispatcher;	public class QueueLoadItem extends EventDispatcher implements IQueueLoadItem	{		private static const DEFAULT_EVENT_HANDLER:Function = new Function( );		private static const INVALID_FILE_EXTENSION:String = new String( 'invalid file extension' ); 		private static const MISSING_FILE_EXTENSION:String = new String( 'missing file extension' ); 		protected var _queueLoadItem:IQueueLoadItem;		protected var _ext:String;		protected var _loadStartEventHandler:Function = new Function( );		protected var _loadProgressEventHandler:Function = new Function( );		protected var _loadCompleteEventHandler:Function = new Function( );		protected var _loadIOErrorEventHandler:Function = new Function( );		protected var _loadInitEventHandler:Function = new Function( );		protected var _loadRemoveEventHandler:Function = new Function( );				public var _id						: uint;		public function QueueLoadItem( 					url:String			, loadCompleteEventHandler:Function = null			, loadProgressEventHandler:Function = null			, loadStartEventHandler:Function = null						)		{								_ext = getExtension( url );									addQueueLoadItem( url );						setLoadCompleteEventHandler( loadCompleteEventHandler );			setLoadProgressEventHandler( loadProgressEventHandler );			setLoadStartEventHandler( loadStartEventHandler );		}		/*		 * 		 * interface		 * 		 */		public function load():void		{						_queueLoadItem.load( );		}			public function remove():void		{				_queueLoadItem.remove( );						removeEventListeners( );			removeEventHandlers( );				}		/*		 * 		 * getters/setters		 * 		 */		public function getUrl():String		{			return _queueLoadItem.getUrl( );		}				public function get id():uint		{			return _id;		}				public function setId( n : uint ) : void		{			_id = n;		}		public function getLoadItem():*		{			return _queueLoadItem;		}		public function setContext( value:* ):void		{			_queueLoadItem.setContext( value );		}		public function setLoadCompleteEventHandler( value:Function = null ):void		{						var queueLoadItem:EventDispatcher = _queueLoadItem as EventDispatcher;			queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_COMPLETE, _loadCompleteEventHandler );						_loadCompleteEventHandler = checkEventHandler( value );						queueLoadItem.addEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_COMPLETE, _loadCompleteEventHandler );		}		public function setLoadProgressEventHandler( value:Function = null ):void		{						var queueLoadItem:EventDispatcher = _queueLoadItem as EventDispatcher;			queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_PROGRESS, _loadProgressEventHandler );						_loadProgressEventHandler = checkEventHandler( value );						queueLoadItem.addEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_PROGRESS, _loadProgressEventHandler ); 		}		public function setLoadStartEventHandler( value:Function = null ):void		{						var queueLoadItem:EventDispatcher = _queueLoadItem as EventDispatcher;			queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_START, _loadStartEventHandler );						_loadStartEventHandler = checkEventHandler( value );						queueLoadItem.addEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_START, _loadStartEventHandler ); 		}		public function setLoadIOErrorEventHandler( value:Function = null ):void		{						var queueLoadItem:EventDispatcher = _queueLoadItem as EventDispatcher;			queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_IO_ERROR, _loadIOErrorEventHandler );						_loadIOErrorEventHandler = checkEventHandler( value );						queueLoadItem.addEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_IO_ERROR, _loadIOErrorEventHandler );		}		public function setLoadInitEventHandler( value:Function = null ):void		{					var queueLoadItem:EventDispatcher = _queueLoadItem as EventDispatcher;				queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_INIT, _loadInitEventHandler );						_loadInitEventHandler = checkEventHandler( value );						queueLoadItem.addEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_INIT, _loadInitEventHandler ); 		}		public function setLoadRemoveEventHandler( value:Function = null ):void		{					var queueLoadItem:EventDispatcher = _queueLoadItem as EventDispatcher;				queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_REMOVE, _loadRemoveEventHandler );						_loadRemoveEventHandler = checkEventHandler( value );						queueLoadItem.addEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_REMOVE, _loadRemoveEventHandler );		}		/*		 * 		 * private functions		 * 		 */		private function checkEventHandler( value:Function ):Function		{			if ( !Boolean( value ) ) 				value = DEFAULT_EVENT_HANDLER;			return value;		}		private function addQueueLoadItem( url:String ):void		{									switch ( true )			{				case isDisplay( ) :					_queueLoadItem = new QueueLoadItemDisplay( url );					break;				case isURL( ) :					_queueLoadItem = new QueueLoadItemURL( url );					break;				case isSound( ) :					_queueLoadItem = new QueueLoadItemSound( url );					break;				case isZip( ) :					_queueLoadItem = new QueueLoadItemZip( url );					break;				default:					checkError( url );			}					}		private function isDisplay():Boolean		{			var value:Boolean;			if ( 				_ext === 'swf' || _ext === 'gif' || _ext === 'jpg' || _ext === 'png' || _ext === 'bmp' 				)			{				value = true;			}						return value;		}		private function isURL():Boolean		{			var value:Boolean;						if ( 				_ext === 'xml' || _ext === 'css' || _ext === 'txt' || _ext === 'html' || _ext === 'xhtml' 				)			{				value = true;			}									return value;		}		private function isZip():Boolean		{			return (_ext === 'zip');		}		private function isSound():Boolean		{			var value:Boolean;			if ( 				_ext === 'mp3' 				)			{				value = true;			}						return value;		}		private function checkError( url:String = null):void		{			var throwUrl:String = (url != null) ? url : getUrl( );									if ( _ext )			{										throw new IllegalOperationError( INVALID_FILE_EXTENSION + ' : ' + throwUrl );			}			else			{				throw new IllegalOperationError( MISSING_FILE_EXTENSION + ' : ' + throwUrl );			} 		}		private function getExtension( filename:String ):String 		{			if ( filename.indexOf( "." ) >= 0 ) 			{				filename = filename.split( "." ).pop( );			}			if ( filename.indexOf( "?" ) >= 0 ) 			{				filename = filename.split( "?" )[ 0 ];			}			if ( filename.indexOf( "#" ) >= 0 ) 			{				filename = filename.split( "#" )[ 0 ];			}			return filename;		}		private function removeEventListeners():void		{			var queueLoadItem:EventDispatcher = _queueLoadItem as EventDispatcher;			queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_COMPLETE, _loadCompleteEventHandler );			queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_PROGRESS, _loadProgressEventHandler );			queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_START, _loadStartEventHandler );			queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_INIT, _loadInitEventHandler );			queueLoadItem.removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_REMOVE, _loadRemoveEventHandler );		}		private function removeEventHandlers():void		{			_loadCompleteEventHandler = null;			_loadProgressEventHandler = null;			_loadStartEventHandler = null;			_loadInitEventHandler = null;			_loadRemoveEventHandler = null;					}	}}