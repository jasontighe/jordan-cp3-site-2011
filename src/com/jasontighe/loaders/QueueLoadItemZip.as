package com.jasontighe.loaders {	import deng.fzip.FZip;	import com.jasontighe.loaders.events.QueueLoadItemEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	public class QueueLoadItemZip extends AbstractQueueLoadItem	{		private var _progressEvent : ProgressEvent;		public function QueueLoadItemZip( url:String )		{						super( url );						_loadItem = new FZip( );			_loadListener = _loadItem;		}						override public function load():void		{						if ( isValidUrl( ) )			{				addListeners();				_loadItem.load(new URLRequest(_url));            }							}					override protected function addListeners():void		{					var loadListener:EventDispatcher = _loadListener as EventDispatcher;			loadListener.addEventListener( IOErrorEvent.IO_ERROR, onQueueLoadItemIOError );			loadListener.addEventListener( ProgressEvent.PROGRESS, onQueueLoadItemProgress );			loadListener.addEventListener( Event.COMPLETE, onQueueLoadItemComplete );						loadListener.addEventListener( Event.OPEN, onQueueLoadItemInit );					}		override protected function removeListeners():void		{									if ( _loadListener ) 			{ 								var loadListener:EventDispatcher = _loadListener as EventDispatcher;				loadListener.removeEventListener( IOErrorEvent.IO_ERROR, onQueueLoadItemIOError );				loadListener.removeEventListener( ProgressEvent.PROGRESS, onQueueLoadItemProgress );				loadListener.removeEventListener( Event.COMPLETE, onQueueLoadItemComplete );							loadListener.removeEventListener( Event.OPEN, onQueueLoadItemInit );					_loadListener = null;			}				}			override protected function onQueueLoadItemProgress( event:ProgressEvent ):void		{			_progressEvent = event;						var bl:uint = event.bytesLoaded;			var bt:uint = event.bytesTotal;						dispatchEvent( new QueueLoadItemEvent( QueueLoadItemEvent.QUEUE_LOAD_ITEM_PROGRESS, false, false, _loadItem, bl, bt ) );		}		override protected function onQueueLoadItemComplete( event:Event ):void		{					var bl:uint = _progressEvent.bytesLoaded;			var bt:uint = _progressEvent.bytesTotal;						dispatchEvent( new QueueLoadItemEvent( QueueLoadItemEvent.QUEUE_LOAD_ITEM_COMPLETE, false, false, _loadItem, bl, bt ) );			dispatchEvent( new QueueLoadItemEvent( QueueLoadItemEvent.QUEUE_LOAD_ITEM_REMOVE ) );		}		}}