package com.jasontighe.loaders {	import com.jasontighe.loaders.events.QueueLoadItemEvent;	import com.jasontighe.loaders.events.QueueLoaderEvent;	import flash.events.EventDispatcher;	public class QueueLoader extends EventDispatcher	{		private static const DEFAULT_EVENT_HANDLER			: Function = new Function( );		private var _arr									: Array = new Array( );		private var _items									: Number = new Number( 0 );		private var _isLoading								: Boolean = false;		private var _loadStartEventHandler					: Function = new Function( );		private var _loadProgressEventHandler				: Function = new Function( );		private var _loadCompleteEventHandler				: Function = new Function( );				public var _bytesLoaded								: Number;		public var _bytesTotal								: Number;		public var _percentLoaded							: Number;						public function QueueLoader( 					loadCompleteEventHandler:Function = null			, loadProgressEventHandler:Function = null			, loadStartEventHandler:Function = null			)		{			setLoadCompleteEventHandler( loadCompleteEventHandler );			setLoadProgressEventHandler( loadProgressEventHandler );			setLoadStartEventHandler( loadStartEventHandler );				}		public function add( loadItem:IQueueLoadItem ):void		{			addLoadItemEventListeners( loadItem );									_arr.push( loadItem );			_items++;		}		public function load():void		{						checkStart( );		}		public function remove():void		{						_isLoading = false;			_items = NaN;						for ( var i:int = 0; i < _arr.length ; i++ )			{								removeLoadItemEventListeners( _arr[ i ] as IQueueLoadItem );				_arr[ i ].remove( );				_arr[ i ] = null;				}								_arr = null;						removeEventListeners( );			removeEventHandlers( );		}		/*		 * 		 * getters/setters		 * 		 */		public function getNumItems():uint		{			return _items;		}		public function getActive():uint		{			return _items - _arr.length;		}				public function setLoadStartEventHandler( value:Function = null ):void		{						removeEventListener( QueueLoaderEvent.QUEUE_LOADER_START, _loadStartEventHandler );						_loadStartEventHandler = checkEventHandler( value );						addEventListener( QueueLoaderEvent.QUEUE_LOADER_START, _loadStartEventHandler ); 		}		public function setLoadProgressEventHandler( value:Function = null ):void		{						removeEventListener( QueueLoaderEvent.QUEUE_LOADER_PROGRESS, _loadProgressEventHandler );						_loadProgressEventHandler = checkEventHandler( value );						addEventListener( QueueLoaderEvent.QUEUE_LOADER_PROGRESS, _loadProgressEventHandler ); 		}		public function setLoadCompleteEventHandler( value:Function = null ):void		{						removeEventListener( QueueLoaderEvent.QUEUE_LOADER_COMPLETE, _loadCompleteEventHandler );						_loadCompleteEventHandler = checkEventHandler( value );						addEventListener( QueueLoaderEvent.QUEUE_LOADER_COMPLETE, _loadCompleteEventHandler ); 		}		/*		 * 		 * private functions		 * 		 */				private function checkEventHandler( value:Function ):Function		{			if ( !Boolean( value ) ) 				value = DEFAULT_EVENT_HANDLER;			return value;		}		private function addLoadItemEventListeners( loadItem:IQueueLoadItem ):void		{			EventDispatcher( loadItem.getLoadItem( ) ).addEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_PROGRESS, onQueueLoadItemProgress );			EventDispatcher( loadItem.getLoadItem( ) ).addEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_REMOVE, onQueueLoadItemRemove );		}		private function removeLoadItemEventListeners( loadItem:IQueueLoadItem ):void		{			EventDispatcher( loadItem.getLoadItem( ) ).removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_PROGRESS, onQueueLoadItemProgress );			EventDispatcher( loadItem.getLoadItem( ) ).removeEventListener( QueueLoadItemEvent.QUEUE_LOAD_ITEM_REMOVE, onQueueLoadItemRemove );		}		private function removeEventListeners( ):void		{			removeEventListener( QueueLoaderEvent.QUEUE_LOADER_START, _loadStartEventHandler );			removeEventListener( QueueLoaderEvent.QUEUE_LOADER_PROGRESS, _loadProgressEventHandler );			removeEventListener( QueueLoaderEvent.QUEUE_LOADER_COMPLETE, _loadCompleteEventHandler );		}				private function removeEventHandlers():void		{			_loadStartEventHandler = null;			_loadProgressEventHandler = null;			_loadCompleteEventHandler = null;		}		private function removeLoadItem():void		{						if ( _arr != null )			{				var loadItem:IQueueLoadItem = _arr.shift( );								if ( loadItem != null )				{ 					loadItem.remove( );					removeLoadItemEventListeners( loadItem ); 				}				if ( _isLoading ) 				{ 					checkArrayLength( ); 				}			}					}		private function checkStart():void		{						if ( !_isLoading )			{				_isLoading = true;								dispatchEvent( new QueueLoaderEvent( QueueLoaderEvent.QUEUE_LOADER_START ) );								checkArrayLength( );				}		}		private function checkArrayLength():void		{			if ( _arr.length == 0 )			{				_isLoading = false;				_items = 0;								dispatchEvent( new QueueLoaderEvent( QueueLoaderEvent.QUEUE_LOADER_COMPLETE ) );			}			else			{				_arr[ 0 ].load( );							}		}		/*		 * 		 * event handlers		 * 		 */		private function onQueueLoadItemProgress( event:QueueLoadItemEvent ):void		{			_percentLoaded = ( ( _items - _arr.length ) + ( event.bl / event.bt ) ) / _items;							// TODO REMOVE THIS			_bytesLoaded = event.bl;			_bytesTotal = event.bt;//			trace( 'QUEUELOADER : onQueueLoadItemProgress() : _bytesLoaded is '+_bytesLoaded );		//			trace( 'QUEUELOADER : onQueueLoadItemProgress() : _bytesTotal is '+_bytesTotal);			dispatchEvent( new QueueLoaderEvent( QueueLoaderEvent.QUEUE_LOADER_PROGRESS, true, false, _percentLoaded ) );		}		private function onQueueLoadItemRemove( event:QueueLoadItemEvent ):void		{			removeLoadItem( );		}				/**		 * 	getters/setters		 */		public function get percentLoaded( ) : Number		{			return _percentLoaded;		} 				public function get bytesLoaded( ) : Number		{			return _bytesLoaded;		} 				public function get bytesTotal( ) : Number		{			return _bytesTotal;		} 	}}