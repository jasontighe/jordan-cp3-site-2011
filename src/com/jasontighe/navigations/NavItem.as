package com.jasontighe.navigations {	import com.jasontighe.containers.DisplayContainer;	import com.jasontighe.navigations.events.NavItemEvent;	import flash.events.Event;	import flash.events.MouseEvent;	public class NavItem extends DisplayContainer implements INavItem	{				protected var _index : uint;		protected var _overEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _outEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _downEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _upEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _clickEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _activateEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _deactivateEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _enableEventHandler : Function = DEFAULT_EVENT_HANDLER;		protected var _disableEventHandler : Function = DEFAULT_EVENT_HANDLER;		public function NavItem () : void		{						super( );						addButtonMode( );		}		/**		 * 		 * interface		 * 		 */		public function over () : void		{			dispatchEvent( new MouseEvent( MouseEvent.MOUSE_OVER ) );		}		public function out () : void		{			dispatchEvent( new MouseEvent( MouseEvent.MOUSE_OUT ) );		}		public function down () : void		{			dispatchEvent( new MouseEvent( MouseEvent.MOUSE_DOWN ) );		}		public function up () : void		{			dispatchEvent( new MouseEvent( MouseEvent.MOUSE_UP ) );		}		public function click () : void		{			dispatchEvent( new MouseEvent( MouseEvent.CLICK ) );		}		public function activate () : void 		{			over();			removeEventListener( MouseEvent.MOUSE_OVER, _overEventHandler );			removeEventListener( MouseEvent.MOUSE_OUT, _outEventHandler );			removeEventListener( MouseEvent.CLICK, _clickEventHandler );						dispatchEvent( new NavItemEvent( NavItemEvent.ACTIVATE ) );						useHandCursor = false;		}		public function deactivate () : void 		{			addEventListener(MouseEvent.MOUSE_OVER, _overEventHandler);			addEventListener( MouseEvent.MOUSE_OUT, _outEventHandler );			addEventListener( MouseEvent.CLICK, _clickEventHandler );			out( );						useHandCursor = true;						dispatchEvent( new NavItemEvent( NavItemEvent.DEACTIVATE ) );		}		public function enable () : void		{					addButtonMode( );			addMouseEventListeners( );						dispatchEvent( new NavItemEvent( NavItemEvent.ENABLE ) );		}		public function disable () : void		{								removeButtonMode( );			removeMouseEventListeners( );						dispatchEvent( new NavItemEvent( NavItemEvent.DISABLE ) );		}		/**		 * 		 * getters/setters		 * 		 */		public function setIndex ( value : uint ) : void		{			_index = value;		}		public function getIndex () : uint		{			return _index;			}		public function setOverState ( active : int = -1 ) : void		{		}		public function setOutState () : void		{		}		public function setActiveState ( active : int = -1 ) : void		{		}		public function setInactiveState () : void		{		}		public function setOverEventHandler ( value : Function = null ) : void		{						removeEventListener( MouseEvent.MOUSE_OVER, _overEventHandler );						_overEventHandler = checkEventHandler( value );						addEventListener( MouseEvent.MOUSE_OVER, _overEventHandler ); 		}		public function setOutEventHandler ( value : Function = null ) : void		{						removeEventListener( MouseEvent.MOUSE_OUT, _outEventHandler );						_outEventHandler = checkEventHandler( value );						addEventListener( MouseEvent.MOUSE_OUT, _outEventHandler );		}		public function setUpEventHandler ( value : Function = null ) : void		{						removeEventListener( MouseEvent.MOUSE_UP, _upEventHandler );						_upEventHandler = checkEventHandler( value );						addEventListener( MouseEvent.MOUSE_UP, _upEventHandler ); 		}		public function setDownEventHandler ( value : Function = null ) : void		{						removeEventListener( MouseEvent.MOUSE_DOWN, _downEventHandler );						_downEventHandler = checkEventHandler( value );						addEventListener( MouseEvent.MOUSE_DOWN, _downEventHandler ); 		}		public function setClickEventHandler ( value : Function = null ) : void		{			removeEventListener( MouseEvent.CLICK, _clickEventHandler );			_clickEventHandler = checkEventHandler( value );			addEventListener( MouseEvent.CLICK, _clickEventHandler );		}		public function setActivateEventHandler ( value : Function = null ) : void		{			removeEventListener( Event.ACTIVATE, _activateEventHandler );						_activateEventHandler = checkEventHandler( value );						addEventListener( NavItemEvent.ACTIVATE, _activateEventHandler ); 		}		public function setDeactivateEventHandler ( value : Function = null ) : void		{			removeEventListener( Event.DEACTIVATE, _deactivateEventHandler );						_deactivateEventHandler = checkEventHandler( value );						addEventListener( NavItemEvent.DEACTIVATE, _deactivateEventHandler ); 		}		public function setEnableEventHandler ( value : Function = null ) : void		{			removeEventListener( NavItemEvent.ENABLE, _enableEventHandler );						_enableEventHandler = checkEventHandler( value );						addEventListener( NavItemEvent.ENABLE, _enableEventHandler );		}		public function setDisableEventHandler ( value : Function = null ) : void		{			removeEventListener( NavItemEvent.DISABLE, _disableEventHandler );						_disableEventHandler = checkEventHandler( value );						addEventListener( NavItemEvent.DISABLE, _disableEventHandler ); 		}		/**		 * 		 * protected methods		 * 		 */		protected function addButtonMode () : void		{			buttonMode = true;			useHandCursor = true;			mouseEnabled = true;				mouseChildren = false;			}		protected function removeButtonMode () : void		{						buttonMode = false;			useHandCursor = false;			mouseEnabled = false;			mouseChildren = false; 		}		override protected function removeEventListeners () : void		{			super.removeEventListeners( );						removeMouseEventListeners( );						removeEventListener( NavItemEvent.ACTIVATE, _activateEventHandler );			removeEventListener( NavItemEvent.DEACTIVATE, _deactivateEventHandler );			removeEventListener( NavItemEvent.ENABLE, _enableEventHandler );			removeEventListener( NavItemEvent.DISABLE, _disableEventHandler );			}			protected function addMouseEventListeners () : void		{			addEventListener( MouseEvent.MOUSE_OVER, _overEventHandler );			addEventListener( MouseEvent.MOUSE_OUT, _outEventHandler );			addEventListener( MouseEvent.MOUSE_DOWN, _downEventHandler );			addEventListener( MouseEvent.MOUSE_UP, _upEventHandler );			addEventListener( MouseEvent.CLICK, _clickEventHandler );		}		protected function removeMouseEventListeners () : void		{					removeEventListener( MouseEvent.MOUSE_OVER, _overEventHandler );			removeEventListener( MouseEvent.MOUSE_OUT, _outEventHandler );			removeEventListener( MouseEvent.MOUSE_DOWN, _downEventHandler );			removeEventListener( MouseEvent.MOUSE_UP, _upEventHandler );			removeEventListener( MouseEvent.CLICK, _clickEventHandler );		}		override protected function addEventHandlers () : void		{						super.addEventHandlers( );						addMouseEventHandlers( );						_activateEventHandler = checkEventHandler( _activateEventHandler );					_deactivateEventHandler = checkEventHandler( _deactivateEventHandler );					_enableEventHandler = checkEventHandler( _enableEventHandler );					_disableEventHandler = checkEventHandler( _disableEventHandler );				}		override protected function removeEventHandlers () : void		{						super.removeEventHandlers( );					removeMouseEventHandlers( );						_activateEventHandler = null;					_deactivateEventHandler = null;					_enableEventHandler = null;					_disableEventHandler = null;					}		protected function addMouseEventHandlers () : void 		{						_overEventHandler = checkEventHandler(_overEventHandler);					_outEventHandler = checkEventHandler( _outEventHandler );					_downEventHandler = checkEventHandler( _downEventHandler );					_upEventHandler = checkEventHandler( _upEventHandler );					_clickEventHandler = checkEventHandler( _clickEventHandler );			}		protected function removeMouseEventHandlers () : void		{						_overEventHandler = null;					_outEventHandler = null;					_downEventHandler = null;					_upEventHandler = null;					_clickEventHandler = null;					}	}}