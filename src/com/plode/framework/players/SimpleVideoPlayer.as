package com.plode.framework.players {	import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.easing.Strong;		import flash.display.DisplayObject;	import flash.events.AsyncErrorEvent;	import flash.events.Event;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.utils.Timer;		public class SimpleVideoPlayer extends DisplayObject 	{		protected var _nc : NetConnection;
		protected var _ns : NetStream;
		protected var _video : Video;		protected var _trans : SoundTransform;		protected var _currentTime : Number;		protected var _currentVolume : Number;		protected var _timer : Timer;		protected static const TIMER_DELAY : uint = 1000;						//-------------------------------------------------------------------------		//		// PUBLIC METHODS		//		//-------------------------------------------------------------------------				public function SimpleVideoPlayer() 		{			addEventListener(Event.ADDED_TO_STAGE, init);		}		public function show() : void 		{			TweenMax.to(this, .3, {autoAlpha: 1, ease: Strong.easeOut});		}		public function hide() : void 		{			TweenMax.to(this, .3, {autoAlpha: 0, ease: Strong.easeOut});		}				public function populate(vidPath : String, w : uint = 0, h : uint = 0) : void 		{			// CONFIGURE VIDEO - WILL AUTO BEGIN PLAYBACK WHEN BUFFERED			_ns.play(vidPath);						if(w == 0 || h == 0)			{				w = 640;				h = 480;			}			_video = new Video(w, h);			_video.smoothing = true;			_video.attachNetStream(_ns);		}		public function play(time : Number = 0) : void 		{			//check to see if video has already been initialized.			if (_ns.bytesLoaded > 0) 			{				_ns.seek(time);				_ns.resume();								startTimer();			} 			else 			{				trace("SimpleVideoPlayer.play(time) : CANNOT PLAY - STREAM HAS NOT BEEN INITIATED YET;\nWAIT FOR COMPLETE EVENT");				new Error('SimpleVideoPlayer.play(time) : CANNOT PLAY - STREAM HAS NOT BEEN INITIATED YET;\nWAIT FOR COMPLETE EVENT');			}		}		public function pause() : void 		{			_currentTime = _ns.time;			_ns.pause();			stopTimer();		}		public function setVolume(val : Number) : void		{			_trans.volume = val;			_ns.soundTransform = _trans;		}		public function fadeVolume(val : Number, dur : Number = .8) : void		{			TweenLite.to(this, dur, {volume: val, onUpdate: setVolume, onUpdateParams:[_trans.volume]});				}						//-------------------------------------------------------------------------		//		// PRIVATE METHODS		//		//-------------------------------------------------------------------------		protected function init(e : Event) : void 		{			removeEventListener(Event.ADDED_TO_STAGE, init);						setupConnection();			setupAudio();		}		protected function setupConnection() : void 
		{
			_nc = new NetConnection();
			_nc.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
			_nc.connect(null);

			_ns = new NetStream(_nc);
			_ns.bufferTime = 3;
			_ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncErrorHandler);
			_ns.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
			
			var client : Object = new Object();
			client.onMetaData = onMetaData;
			_ns.client = client;
		}
		protected function setupAudio() : void 		{			_trans = new SoundTransform();			_trans.volume = 0;			_ns.soundTransform = _trans;
		}
		protected function startTimer() : void		{			if(!_timer) _timer = new Timer(TIMER_DELAY);			if(!_timer.hasEventListener(TimerEvent.TIMER))			{				_timer.addEventListener(TimerEvent.TIMER, onTimer);			}						_timer.start();		}		protected function stopTimer() : void		{			if(!_timer) _timer = new Timer(TIMER_DELAY);			_timer.removeEventListener(TimerEvent.TIMER, onTimer);			_timer.reset();		}						//-------------------------------------------------------------------------		//		// EVENT HANDLERS		//		//-------------------------------------------------------------------------		protected function onStatus(e : NetStatusEvent) : void 		{			trace(e.info.code);			if (e.info.code == "NetConnection.Connect.Success")			{				if(e.target == _nc)				{					trace('NetConnection.Connected');				}				else if(e.target == _ns)				{					trace('NetStream.Connected');					_currentTime = 0;					_ns.pause();					dispatchEvent(e);				}			} 			if (e.info.code == "NetStream.Play.Start") 			{				trace('Playback start');			}			if (e.info.code == "NetStream.Play.Stop") 			{ 				trace('Playback stopped');			} 		} 		protected function onAsyncErrorHandler(e : AsyncErrorEvent) : void 		{			trace("SimpleVideoPlayer.asyncErrorHandler(e)", e);		}		protected function onMetaData(data : Object) : void 		{			trace("SimpleVideoPlayer.onMetaData(data)", data.info);		}		protected function onTimer( e : TimerEvent) : void		{			trace("SimpleVideoPlayer.onTimer(e) : ", Timer(e.target).currentCount);			stopTimer();		}						//-------------------------------------------------------------------------		//		// SETTERS & GETTERS		//		//-------------------------------------------------------------------------		protected function get time() : Number		{			return _currentTime;		}	}}