package com.plode.framework.modules{	import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.BulkProgressEvent;		import com.greensock.TweenMax;	import com.greensock.easing.Strong;	import com.plode.framework.controllers.AbstractSlideshowController;	import com.plode.framework.models.AbstractSlideshowModel;	import com.plode.framework.models.dtos.AbstractSlideDto;		import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;		public class AbstractSlideshowView extends Sprite implements ISlideshow	{		protected var _slideM : AbstractSlideshowModel;		protected var _slideC : AbstractSlideshowController;		protected var _wrapper : Sprite;		protected var _bg : Sprite;		protected var _slideHolder : Sprite;		protected var _mask : Sprite;		protected var _slides : Array;		protected var _loader : BulkLoader;				protected var _bgColor : uint;		protected var _orientation : String;		protected var _w : int;		protected var _h : int;				public static const ORIENTATION_H : String = 'H';		public static const ORIENTATION_V : String = 'V';		protected static const BULK_LOADER_KEY : String = 'BULK_LOADER_KEY';						//----------------------------------------------------------------------		//		// PUBLIC METHODS		//		//----------------------------------------------------------------------		public function setup(m : AbstractSlideshowModel, c : AbstractSlideshowController, w : uint, h : uint, bgColor : uint = 0xff0000, orientation : String = 'H'): void		{			_slideM = m;			_slideC = c;			_w = w;			_h = h;			_bgColor = bgColor;			_orientation = orientation;						addDisplayObjects();			addEventListeners();			loadAssets();		}				public function show(dur : Number = .5) : void		{			TweenMax.to(this, dur, { autoAlpha: 1, delay: dur, ease: Strong.easeOut });		}				public function hide(dur : Number = .5) : void		{			TweenMax.to(this, dur, { autoAlpha: 0, delay: 0, ease: Strong.easeOut });		}				public function dispose():void		{			if(_slideM) _slideM.dispose();			if(_slideC) _slideC.dispose();			if(_slideHolder) removeDisplayObjects();			removeEventListeners();		}								//----------------------------------------------------------------------		//		// PROTECTED METHODS		//		//----------------------------------------------------------------------		protected function addDisplayObjects() : void		{			_wrapper = new Sprite();			_bg = new Sprite();			_bg.graphics.clear();			_bg.graphics.beginFill( _bgColor );			_bg.graphics.drawRect( 0, 0, _w, _h );						_slideHolder = new Sprite();						_mask = new Sprite();			_mask.graphics.clear();			_mask.graphics.beginFill( 0xff0000, .1 );			_mask.graphics.drawRect( 0, 0, _w, _h );						_slideHolder.mask = _mask;			_wrapper.addChild(_bg);			_wrapper.addChild(_slideHolder);			_wrapper.addChild(_mask);			addChild(_wrapper);						_wrapper.alpha = 0;		}				protected function removeDisplayObjects() : void		{			while(_slideHolder.numChildren > 0) _slideHolder.removeChildAt(0);			while(_wrapper.numChildren > 0) _wrapper.removeChildAt(0);						_slides.splice(0);			_slides = null;		}				protected function addEventListeners() : void		{			_slideM.addEventListener(Event.CHANGE, onIndexChanged, false, 0, true);		}				protected function removeEventListeners() : void		{			if(_slideM) _slideM.removeEventListener(Event.CHANGE, onIndexChanged, false);		}				protected function loadAssets() : void		{			_loader = new BulkLoader(BULK_LOADER_KEY);						var items : Array = _slideM.items.slice();			var dto : AbstractSlideDto;			for (var i : uint = 0; i < items.length; i++)			{				dto = items[i] as AbstractSlideDto;				_loader.add(dto.imagePath, {id: i});			}						_loader.addEventListener(BulkLoader.COMPLETE, onAllItemsLoaded);			_loader.addEventListener(BulkLoader.PROGRESS, onLoadProgress);			_loader.start();		}		protected function addSlides() : void		{			_slides = new Array();						var items : Array = _slideM.items.slice();			var bmp : Bitmap;			for (var i : uint = 0; i < items.length; i++)			{				bmp = _loader.getBitmap(i.toString());								// HIDE UNFOCUSED SLIDES				if(_slideHolder.numChildren > 0) bmp.visible = false;				_slideHolder.addChild(bmp);				_slides.push(bmp);			}		}				protected function updateSlides() : void		{			var targetIndex : int = _slideM.nextIndex;			var currentIndex : int = _slideM.currentIndex;			var dif : int = targetIndex - currentIndex;			var polarity : Boolean;			var currentSlide : DisplayObject;			var nextSlide : DisplayObject;			var displacementH : int;			var displacementV : int;						if(Math.abs( dif ) > 0)			{            				// POLARITY...FALSE == MOVES RIGHT/DOWN, TRUE == MOVES LEFT/UP				polarity = (dif > 0);							currentSlide = _slides[ currentIndex ];								// MOVE OFF SCREEN SLIDES OUT OF THE WAY				for each (var item : DisplayObject in _slides)				{					if (item != currentSlide) item.visible = false;				}								nextSlide = _slides[ targetIndex ];				nextSlide.visible = true;								// ORIENTATION				if(_orientation == ORIENTATION_H)				{					displacementH = _w;					displacementV = 0;				}				else				{					displacementH = 0;					displacementV = _h;				}								if (Math.abs( dif ) > (_slides.length - 2))				{					polarity != polarity;						// WRAP IF AT END OF LIST					if (!polarity && currentIndex == _slides.length - 1)					{						// SHUFFLE 0 TO END//						nextSlide.x = currentSlide.x + W;						dif = 1;					}					else if (polarity && currentIndex == 0)					{						// SHUFFLE END TO 0//						nextSlide.x = currentSlide.x - W;						dif = -1;					}				}								var multiplier : int = (polarity) ? 1 : -1;				nextSlide.x = multiplier * displacementH;				nextSlide.y = multiplier * displacementV;									animateSlides( dif );			}		}				protected function animateSlides( dif : int ) : void		{			var currentSlide : DisplayObject = _slides[ _slideM.currentIndex ];			var nextSlide : DisplayObject = _slides[ _slideM.nextIndex ];						var displacementH : int;			var displacementV : int;			// ORIENTATION			if(_orientation == ORIENTATION_H)			{				displacementH = -dif * _w;				displacementV = 0;			}			else			{				displacementH = 0;				displacementV = -dif * _h;			}			TweenMax.to( currentSlide, .6, {x: displacementH, y: displacementV, ease: Strong.easeOut} );			TweenMax.to( nextSlide, .6, {x: 0, y: 0, ease: Strong.easeOut, onComplete: onAnimationComplete} );		}				protected function onAnimationComplete() : void		{			_slideM.updateIndex();						var currentSlide : DisplayObject = _slides[ _slideM.currentIndex ];						// MOVE OFF SCREEN SLIDES OUT OF THE WAY			for each (var item : DisplayObject in _slides)			{				if (item != currentSlide) item.visible = false;			}						_slideC.checkArrows();		}				//----------------------------------------------------------------------		//		// EVENT HANDLERS		//		//----------------------------------------------------------------------		protected function onAllItemsLoaded(evt : Event) : void		{			addSlides();						_loader.clear();						TweenMax.to(_wrapper, .5, {alpha:1});						dispatchEvent(new Event(Event.COMPLETE));		}				protected function onLoadProgress(evt : BulkProgressEvent) : void		{			//			trace(evt.loadingStatus());		}				protected function onIndexChanged( e : Event ) : void		{			updateSlides();		}			}}