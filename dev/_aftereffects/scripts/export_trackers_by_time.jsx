{	/*	 *	 * CREATE A NODE FOR EACH OBJECT	 * - ONLY GENERATE NODES FOR ACTIVE FRAMES	 *	 */	 	var project = app.project;	var compositionCounter = 1;	var compositionLim = project.items.length;	var composition;	var layers;	var properties;	var numFrames;	var outputString = '';	output('<?xml version="1.0" encoding="utf-8"?>');	output('<data>');		buildFile();	writeFile();				//-----------------------------------------------------------------	// FUNCTIONS	//-----------------------------------------------------------------	function buildFile() {		if (properties.length == 0) {			alert("No properties selected.");		}		else {			exportProperties();		}	}		function output(value) {		outputString += value + "\r";	}		function writeFile() {		output('</data>');		var file = new File(Folder.desktop.absoluteURI + "/hotspot_exports/" + "hotspots.xml");		file.open("w","TEXT","????");		file.write(outputString);		file.close();		file.execute();	}		function exportProperties() {		// LOOP THROUGH COMPOSITIONS		for(; compositionCounter <= compositionLim; compositionCounter++)		{		//	composition = project.activeItem;			composition = project.item(compositionCounter);				if(composition.typeName.indexOf('Composition') > -1 && composition.name.indexOf('hotspots') > -1)			{				layers = composition.selectedLayers;				properties = composition.selectedProperties;				numFrames = Math.floor(composition.duration / composition.frameDuration);								var camId = composition.name.substring(composition.name.indexOf('_c') + 2, composition.name.length);				output('	<camera name="' + camId + '">');				// LOOP THROUGH SELECTED LAYERS				var layerCount = 0;				var layerLim = layers.length;				var currentLayer;				var layerName;				var currentProperties;						for(; layerCount < layerLim; layerCount++)				{					currentLayer = layers[layerCount];					layerName = currentLayer.name;					currentProperties = currentLayer.selectedProperties;							output('		<layer name="' + layerName + '">');							// LOOP THROUGH ALL PROJECT FRAMES					var i = 0;					var l = numFrames;					for (; i<l; ++i) 					{						var start = currentLayer.inPoint;						var end = currentLayer.outPoint;						var time = i * composition.frameDuration;												// CHECK IF LAYER IS ACTIVE						if(time >= start && time <= end)						{							output('			<keyframe frame="' + i + '" time="' + time + '">');							// build properties list							var x = 0;							var y = currentProperties.length;							var source = [];							var sourceCount = 0;							var currentContainer;									for (; x<y; ++x) {								if (currentProperties[x].valueAtTime != undefined) {									var parentName;									if (currentProperties[x].parentProperty != undefined) {										parentName = currentProperties[x].parentProperty.name;									}									else {										parentName = "Undefined Property";									}																		if (source[parentName] == undefined) {										source[parentName] = {};										source[parentName].name = currentProperties[x].name;										source[parentName].values = [];									}									source[parentName].values.push(currentProperties[x]);								}							}							// build xml							for (var pn in source) {//								output('				<source name="' + pn + '">');								var x = 0;								var y = source[pn].values.length;								for (; x<y; ++x) {									exportProperty(source[pn].values[x], time)								}//								output('				</source>');							}							output('			</keyframe>');						}					}							output('		</layer>');						}						output('	</camera>');							}			}	}		function exportProperty(prop, time) {		var val = prop.valueAtTime(time, true);		if (val.length > 1) {			exportMultiValue(prop, val);		}		else {			exportSingleValue(prop, val);		}	}		function exportSingleValue(prop, val) {		output('				<property name="' + prop.name + '" value="' + val + '"/>');	}		function exportMultiValue(prop, val) {		var str = '				<property name="' + prop.name + '"';				var i = 0;		var l = val.length;		for (; i<l; ++i) {			str += ' value' + i + '="' + val[i] + '"';		}				str += '/>';		output(str);	}		function outputObject(obj) {		var out = "";		for (var s in obj) {			out += s + "\n";		}		alert(out);	}		}